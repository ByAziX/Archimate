/*
 * 
 * This work is licensed under the HUMANS Licence described below.
 * 
 * Author: Hugo Millet
 * License: 

 * This JavaScript script is designed to automate the generation of flow matrices from cartographic data.
 * Primarily used within the Archi software environment, this tool helps in visualizing and analyzing the flow of information, resources, or data between different components or entities in a system architecture. 
 * The script extracts relevant data points from the cartographic representations and processes them to construct comprehensive flow matrices.
 * (c) 2024 MILLET Hugo 
*/
load(__DIR__ + "lib/jszip-101.js");
load(__DIR__ + "lib/myexcel.js");

const serviceMap = {
    '443': 'HTTPS',
    '80': 'HTTP',
    '22': 'SSH',
    '21': 'FTP',
    '23': 'Telnet',
    '25': 'SMTP',
    '110': 'POP3',
    '143': 'IMAP',
    '389': 'LDAP',
    '636': 'LDAPS',
    '53': 'DNS',
    '123': 'NTP',
    '161': 'SNMP',
};

const SHEET_NAMES = {
    rules: 'Rules',
    objects: 'Objects',
    ports: 'Ports',
    fwRules: 'FW Rules',
    fwObjects: 'FW Objects',
    fwPorts: 'FW Ports'
};

const HEADERS = {
    rules: ["Demandeur CDP", "Demandeur Archi", "Type flux", "Prod/HP", "Env.", "In/Out", "Description", "Source Nom", "Source IP", "Destination Nom", "Destination IP", "Proto Nom", "Proto/Port", "Avis SSI", "Commentaire SSI", "Etat", "ID (Nom) de la Règle", "Date implémentation /Révision", "Opérateur"],
    objects: ["Group Name", "Object Name", "IP", "Type"],
    ports: ["Protocol", "Port", "Service Name", "Port Name"],
    fwRules: ["Demandeur CDP", "Demandeur Archi", "Type flux", "Prod/HP", "Env.", "In/Out", "Description", "Source Nom", "Source IP", "Destination Nom", "Destination IP", "Proto Nom", "Proto/Port", "Avis SSI", "Commentaire SSI", "Etat", "ID (Nom) de la Règle", "Date implémentation /Révision", "Opérateur"],
    fwObjects: ["Group Name", "Object Name", "IP", "Type"],
    fwPorts: ["Protocol", "Port", "Service Name", "Port Name"],
};

const DEFAULT_STYLE = { border: "none,none,none,thin #333333", font: "Calibri 12 #1B2A41 B", fill: "#f3f3f3" };

console.show();
console.clear();
var nodes = $("node");
var view = selection.parents().add(selection).filter("view").first();
console.log("> Exporting view: " + $(view).attr("name"));
var flowRelationship = $(view).find("flow-relationship"); // Build a collection containing the flow-relationship, and then get all flow-relationship in this view.
var compositionRelationship = $(view).find("composition-relationship"); // Build a collection containing the composition-relationship, and then get all flow-relationship in this view.
var aggregationRelationship = $(view).find("aggregation-relationship"); // Build a collection containing the aggregation-relationship, and then get all flow-relationship in this view.
var defaultFileName = model.name+"_"+$(view).attr("name") ? model.name+"_"+$(view).attr("name") + ".xlsx" : "Exported Model.xlsx"; // Default file name
var exportFile = window.promptSaveFile({ title: "Export to Excel", filterExtensions: [ "*.xlsx" ], fileName: defaultFileName } );
let currentRow = 1, currentRowObject = 1, currentRowPort = 1;
let uniqueObject = new Map();
let uniquePorts = new Set(); // Initialise un Set vide pour collecter les ports uniques
let uniqueIP = new Set(); // Initialise un Set vide pour collecter les IP uniques
let ip_set = new Set();
if(exportFile == null) {
    console.log("> Export cancelled");
    exit();
}
console.log("> Starting Excel Export");
function createSheetsAndHeaders(excel, sheetNames, headers, defaultStyle) {
    const formatHeader = excel.addStyle(defaultStyle);
    const sheets = {};

    Object.keys(sheetNames).forEach((key) => {
        if (!headers[key]) {
            console.error(`No headers found for key: ${key}`);
            return; // Skip creating this sheet if headers are not found
        }
        const sheet = excel.addSheet(sheetNames[key]);
    
        sheets[key] = sheet;
        setHeaders(sheet, headers[key], formatHeader);
    });
    return sheets;
}

function setHeaders(sheet, headers, style) {
    if (!headers) {
        console.error('Headers are undefined, cannot set headers in the sheet.');
        return;
    }
    headers.forEach((header, index) => {
        excel.set(sheet, index, 0, header, style);
    });
}
// permet de créer une clé unique pour chaque objet en fonction de son groupe, nom, ip et type
function getKeyFromObject(obj) {
    return `${obj.group}:${obj.name}:${obj.ip}:${obj.type}`;
}

function handleFlow(element) {
    let name_from_group = [];
    let objectRules = new Map();
    switch (element.attr('type')) {
        case "technology-interface":
            let check_name_from_node = getElementsFromRelationship([compositionRelationship,aggregationRelationship],"target", "node", element[0].concept.id, "source");
            if (check_name_from_node.length == 0){
                // VIP or LB
                objectRules.set(element.prop("Name", false), element.prop("IP address", false));
            }else{
                check_name_from_node.forEach(node => {
                    // check si le noeud a plusieurs IP
                    const nodeName = getElementsFromRelationship([compositionRelationship, aggregationRelationship], "source", "technology-interface", node.attr('id'), "target").length > 1 ? `${node.attr('name')}-${element.prop("IP address", false)}` : node.attr('name');
                    objectRules.set(nodeName, element.prop("IP address", false));
                });
            }
            object = {group:"",name: element.prop("Name", false), ip: element.prop("IP address", false), type: "Host"};
            uniqueObject.set(getKeyFromObject(object), object);
            break;
        case "grouping":
            console.log("Parents "+element[0].concept.name);
            getElementsFromRelationship([aggregationRelationship,compositionRelationship],"source", "node", element[0].concept.id, "target").forEach(function(nodes){
                    if (nodes.attr('type') == "node"){
                        let target = handleFlow(nodes) 
                        for (const [key, value] of target.objectRules.entries()) {
                            objectRules.set(key, value);
                        }
                    }
            });
            getElementsFromRelationship([compositionRelationship,aggregationRelationship],"source", "grouping", element[0].concept.id, "target").forEach(function(groups){
                    if (groups.attr('type') == "grouping"){
                        console.log("Enfant "+groups.attr('name'));
                        name_from_group.push(...getElementsFromRelationship([compositionRelationship, aggregationRelationship], "target", "grouping", groups[0].concept.id, "source").map(groupId => groupId.attr('name')));
                        let target = handleFlow(groups);
                        for (const [key, value] of target.objectRules.entries()) {
                            objectRules.set(key, value);
                        }

                        object = {group:name_from_group,name: groups.attr('name'), ip: "", type: "Group"};
                        uniqueObject.set(getKeyFromObject(object), object);
                    }
            });

            break;
        case "node": 
            // regarder si le noeud est dans un groupe et ajouter le nom du groupe à la liste
            getElementsFromRelationship([compositionRelationship, aggregationRelationship], "source", "technology-interface", element[0].concept.id, "target").map(source => source.attr("name")).forEach(function(ip){
                if (getElementsFromRelationship([compositionRelationship, aggregationRelationship], "source", "technology-interface", element[0].concept.id, "target").map(source => source.attr("name")).length > 1){
                    // Multiple IP from node for the same node
                    objectRules.set(element.attr('name')+"-"+ip, ip);
                    object = {group:getElementsFromRelationship([aggregationRelationship, compositionRelationship], "target", "grouping", element[0].concept.id, "source").map(group => group.attr('name')),name: element.attr('name')+"-"+ip, ip: ip, type: "Host"};
                    uniqueObject.set(getKeyFromObject(object), object);
                }else{
                    // si element.attr('name') pas dans la liste name_from_node alors on l'ajoute
                    objectRules.set(element.attr('name'), ip);
                    object = {group:getElementsFromRelationship([aggregationRelationship, compositionRelationship], "target", "grouping", element[0].concept.id, "source").map(group => group.attr('name')),name: element.attr('name'), ip: ip, type: "Host"};
                    uniqueObject.set(getKeyFromObject(object), object);
                }
            });
            
            break;
        case "communication-network":
            objectRules.set(element.attr('name'), element.prop("Network", false));
            object = {group:"",name: element.attr('name'), ip: element.prop("Network", true), type: "Network"};
            uniqueObject.set(getKeyFromObject(object), object);
            break;
        default:
            console.log("Unhandled source type: " + sourceType);
            break;
    }
    return { objectRules };
}

function getElementsFromRelationship(relation_types,relation_check, element_type, element_check, element_return){
    var element = [];
    relation_types.forEach(function(relation_type) {
        relation_type.forEach(function(relation) {
            if (relation.concept[relation_check].id == element_check && $("#"+relation.concept[element_return].id).attr('type') == element_type) { // if target of the composition-relationship is the source of the flow-relationship
                element.push($("#"+relation.concept[element_return].id));
            }       
        }); 

    });

    return element;
}

function cleanAndJoin(input) {
    if (Array.isArray(input)) {
        return input.map(item => String(item).trim()).join('\n');
    }
    return String(input).trim();
}

function addElementInExcel(sheet, column, row, value, style = null) {
    excel.set(sheet, column, row, value, style || undefined);
}

function populateExcelRow(sheet, startColumn, row, data) {
    data.forEach((value, index) => {
        addElementInExcel(sheet, startColumn + index, row, value);
    });
}

function prepareAndPopulateData(sheet, item, type, rowStart) {
    let rowData = type === 'object' ?
        [item.group, item.name, item.ip, item.type].map(cleanAndJoin) :
        [item.split("/")[0], item.split("/")[1], serviceMap[item.split("/")[1]] || 'Unknown', item].map(cleanAndJoin);

    populateExcelRow(sheet, 0, rowStart, rowData);
}

function processFlowRelationship(flowRelationship) {
    const source = handleFlow($("#" + flowRelationship.concept.source.id));
    const target = handleFlow($("#" + flowRelationship.concept.target.id));
    const ports = flowRelationship.prop("port", true);
    const serviceName = ports.map(port => serviceMap[port.split("/")[1]] || 'Unknown');
    return [
        ...new Array(6).fill(""),
        flowRelationship.concept.documentation,
        [...source.objectRules.keys()].join("\n"),
        [...source.objectRules.values()].join("\n"),
        [...target.objectRules.keys()].join("\n"),
        [...target.objectRules.values()].join("\n"),
        serviceName.join("\n"),
        ports.join("\n"),
        ...new Array(9).fill("")
    ].map(cleanAndJoin);
}

function processAllFlowRelationships(sheet, flowRelationships, checkFW) {
    flowRelationships.forEach(flowRelationship => {
        if (!checkFW || flowRelationship.prop("FW", false) === "true") {
            const rowData = processFlowRelationship(flowRelationship);
            populateExcelRow(sheet, 0, currentRow++, rowData);
            flowRelationship.prop("port", true).forEach(port => uniquePorts.add(port));
        }
    });
}

function resetData() {
    currentRow = 1;
    currentRowObject = 1;
    currentRowPort = 1;
    uniqueObject.clear();
    uniquePorts.clear();
}

function processAndPopulateBasedOnFWFlag(excel, flowRelationship, fwFlag, relationshipIndex, objectSheetIndex, portSheetIndex) {
    resetData();
    processAllFlowRelationships(relationshipIndex, flowRelationship, fwFlag);
    uniqueObject.forEach((object) => prepareAndPopulateData(objectSheetIndex, object, 'object', currentRowObject++));
    uniquePorts.forEach((port) => prepareAndPopulateData(portSheetIndex, port, 'port', currentRowPort++));
}

// MAIN Script

const excel = $JExcel.new();  // Create a new Excel document
excel.removeSheet("Sheet 0"); // Remove default sheet
const sheets = createSheetsAndHeaders(excel, SHEET_NAMES, HEADERS, DEFAULT_STYLE); // Create custom sheets

// Process and populate without 'FW' filter
processAndPopulateBasedOnFWFlag(excel, flowRelationship, false, 0, 1, 2);

// Process and populate with 'FW' filter set to true
processAndPopulateBasedOnFWFlag(excel, flowRelationship, true, 3, 4, 5);

// Save and export the populated Excel file
excel.generate(exportFile);
console.log("> Export done");
