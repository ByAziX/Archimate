/*
 * Statistics
 * 
 * Show some stats in a message alert box
 * 
 * (c) 2024 ByAziX
 * 
 * This work is licensed under the HUMANS Licence described below.
 * 
 * The HUMANS (Help Us Make Archi Noteworthy & Sustainable) licence goal is to bring happiness
 * to both Archi users and developers. This means that we would like users of
 * jArchi to donate something and get this useful script as a gift in return (and feel great!).
 *
 * The only restrictions that apply are:
 *  - You can't redistribute this script.
 *  - You can't use this script for commercial purposes unless you obtained it from the official Archi distribution channels.
 * 
 */


console.show();
console.clear();
console.log("----------GET OBJECT NODE FROM MODEL-!!!!!!!!!!!!!!!!!!!!------------");
var nodes = $("node");
//console.log(nodes);

console.log("----------GET VIEW-!!!!!!!!!!!!!!!!!!!!------------");
var view = $(".5-Prod").first(); // Get view from its name (pick the first one if multiple views share the same name)
console.log($(view).filter("name")) // Get the name of the view
var flowRelationship = $(view).find("flow-relationship"); // Build a collection containing the view, and then get all flow-relationship in this view.
var compositionRelationship = $(view).find("composition-relationship"); // Build a collection containing the composition-relationship, and then get all flow-relationship in this view.
var aggregationRelationship = $(view).find("aggregation-relationship"); // Build a collection containing the aggregation-relationship, and then get all flow-relationship in this view.

// Open a dialog to let the user choose where to save the generated file
var defaultFileName = model.name ? model.name + ".xlsx" : "Exported Model.xlsx"; // Default file name
var exportFile = window.promptSaveFile({ title: "Export to Excel", filterExtensions: [ "*.xlsx" ], fileName: defaultFileName } );

var current_row = 1;

uniqueObject = new Set(); // Initialise un Set vide pour collecter les object uniques
uniquePorts = new Set(); // Initialise un Set vide pour collecter les ports uniques


// User cancelled
if(exportFile == null) {
    console.log("> Export cancelled");
    exit();
}

console.log("> Starting Excel Export");

// Load MyExcel and JSZip JS files
load(__DIR__ + "lib/jszip-101.js");
load(__DIR__ + "lib/myexcel.js");

// Create a new Excel file with a default font and colour
var excel = $JExcel.new("Calibri 12 #333333");


var sheet2 = excel.addSheet('Objets');
var sheet3 = excel.addSheet('Ports');

// Set up some headers
var headers = [
    "RuleName",
    "Source Name",
    "Source IP",
    "Target Name",
    "Target IP",
    "Port",
    "Documentation"

];

// Format the header with a style
var formatHeader = excel.addStyle ({
    fill: "#dddddd",
	border: "thin, thin, thin, thin #555555",
	font: "Arial 12 #000000 B",
});



set_header(0, headers, formatHeader);
set_header(1, ["Group Name", "Object Name", "IP", "Type"], formatHeader);
set_header(2, ["Protocol", "Port", "Service Name","Port Name"], formatHeader);




function set_header(sheet_number, headers, formatHeader){
    // Set the headers
    for(var i = 0; i < headers.length; i++) {
        excel.set(sheet_number, i, 0, headers[i], formatHeader);
        excel.set(sheet_number, i, undefined, "auto"); // column width is auto
    }
}



// Fonction pour récupérer et traiter les informations de la source selon le type
function handleFlow(sourceId) {
    var sourceType = $("#" + sourceId).attr('type');
    var sourceName = $("#" + sourceId).attr('name');
    var sourceIPs = [];
    var sourceNames = [];
    var uniqueObject = new Set(); // Initialise un Set vide pour collecter les object uniques
    var NodeFromGroup = [];

    print("sourceType: "+sourceType);
    print("sourceName: "+sourceName);

    switch (sourceType) {
        case "technology-interface":

            sourceIPs = $("#"+sourceId).attr('name'); // get ip of the source
            sourceNames = get_node_name_from_interface($("#"+sourceId)[0].concept.id);  

            break;
        case "grouping":

            NodeFromGroup.push(get_node_from_group($("#"+sourceId)[0].concept.id));            
            NodeFromGroup.forEach(function(nodes){
                nodes.forEach(function(node){
                    sourceNames.push(node.attr('name'));
                    sourceIPs.push(get_interface_ip_from_node(node.attr('id')));
                });
            });

            break;
        case "node":
            sourceNames.push($("#"+sourceId).attr('name'));
            sourceIPs = get_interface_ip_from_node($("#"+sourceId)[0].concept.id);
            break;
        default:
            // Gestion d'autres types éventuels
            console.log("Unhandled source type: " + sourceType);
            break;
    }

    return { sourceNames, sourceIPs };
}



function get_node_name_from_interface(interface_id){
    var node_name = [];
    compositionRelationship.each(function(compositionRelationship) { // get all composition-relationship
        if (compositionRelationship.concept.target.id == interface_id) { // if target of the composition-relationship is the source of the flow-relationship
            node_name.push($("#"+compositionRelationship.concept.source.id).attr('name'));
        }       
    }
    );    
    return node_name;
}

function get_interface_ip_from_node(node_id){
    var interface_ip = [];
    compositionRelationship.each(function(compositionRelationship) { // get all composition-relationship
        if (compositionRelationship.concept.source.id == node_id) { // if target of the composition-relationship is the source of the flow-relationship
            interface_ip.push($("#"+compositionRelationship.concept.target.id).attr('name'));
        }       
    }
    );    
    return interface_ip;
}

function get_node_from_group(group_id){
    var node = [];
    aggregationRelationship.each(function(aggregationRelationship) { // get all composition-relationship
        if (aggregationRelationship.concept.source.id == group_id) { // if target of the composition-relationship is the source of the flow-relationship
            if ($("#"+aggregationRelationship.concept.target.id).attr('type') == "node"){
                node.push($("#"+aggregationRelationship.concept.target.id));
            }
        }       
    }
    );    
    return node;    
}











flowRelationship.each(function(flowRelationship) { // Note: 'node' is a Visual Object
    
    source = handleFlow(flowRelationship.concept.source.id)
    target = handleFlow(flowRelationship.concept.target.id);
    console.log("RuleName: "+ flowRelationship.concept.name + " Source Name: "+source.sourceNames+" Source IP: "+source.sourceIPs+" Target Name: "+target.sourceNames+" Target IP: "+target.sourceIPs+' Port: '+flowRelationship.prop("port",true)+' Documentation: '+flowRelationship.concept.documentation);

    console.log("\n")
    relation_name = flowRelationship.concept.name;
    source_name = source.sourceNames;
    source_ip = source.sourceIPs;
    target_name = target.sourceNames;
    target_ip = target.sourceIPs;
    port = flowRelationship.prop("port",true);
    relation_documentation = flowRelationship.concept.documentation;

    var relation_name_str = Array.isArray(relation_name) ? relation_name.join('\n') : relation_name;
    var source_name_str = Array.isArray(source_name) ? source_name.join('\n') : source_name;
    var source_ip_str = Array.isArray(source_ip) ? source_ip.join('\n') : source_ip;
    var target_name_str = Array.isArray(target_name) ? target_name.join('\n') : target_name;
    var target_ip_str = Array.isArray(target_ip) ? target_ip.join('\n') : target_ip;
    var port_str = Array.isArray(port) ? port.join('\n') : port;
    var relation_documentation_str = relation_documentation;

    // Utilisez les variables *_str pour définir les valeurs dans Excel
    excel.set(0, 0, current_row, relation_name_str);
    excel.set(0, 1, current_row, source_name_str);
    excel.set(0, 2, current_row, source_ip_str);
    excel.set(0, 3, current_row, target_name_str);
    excel.set(0, 4, current_row, target_ip_str);
    excel.set(0, 5, current_row, port_str);
    excel.set(0, 6, current_row, relation_documentation_str);        

    current_row++;

}
);


excel.generate(exportFile);
console.log("> Export done");
